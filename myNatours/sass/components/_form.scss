.form {
  &__group:not(:last-child) {
    margin-bottom: 2rem;
  }

  &__input {
    font-size: 1.5rem;

    //input elements do not automatically inherit font properties.
    font-family: inherit;
    color: inherit;
    padding: 1.5rem 2rem;
    border-radius: 2px;
    background-color: rgba($color-white, 0.5);
    border: none;
    //to account for any pixels moving around when focused
    border-bottom: 3px solid transparent;
    width: 90%;
    display: block;
    transition: all 0.3s;

    &:focus {
      outline: none;
      box-shadow: 0 1rem 2rem rgba($color-black, 0.1);
      border-bottom: 3px solid $color-primary;
    }

    &:focus:invalid {
      border-bottom: 3px solid $color-secondary-dark;
    }

    //will access the placeholder text of an input
    &::-webkit-input-placeholder {
      color: $color-grey-dark-2;
    }
  }

  &__label {
    font-size: 1.2rem;
    font-weight: 700;
    margin-left: 2rem;
    margin-top: 0.7rem;
    display: block;
    transition: all 0.3s;
  }

  //+ selects the adjacent sibling, the 1st one after , or else this wouldn't work |||||| ~ is the general sibling selector, 2nd element must be after the 1st
  &__input:placeholder-shown + &__label {
    opacity: 0;
    visibility: hidden;
    transform: translateY(-4rem);
  }


  //custom radio buttons --------------------------------
  &__radio-group {
    width: 48%;
    display: inline-block;
  }

  //hiding the actual selector from view
  &__radio-input{
    display: none;
  }

  &__radio-label {
    font-size: 1.4rem;
    cursor: pointer;
    position: relative;
    padding-left: 4.5rem;
  }

  &__radio-button {
    height: 3rem;
    width: 3rem;
    border: 5px solid $color-primary;
    border-radius: 50%;
    display: inline-block;
    position: absolute;
    left: 0;
    top: -.4rem;

    //building dot on the inside
    &::after {
      content: "";
      display: block;
      height: 1.3rem;
      width: 1.3rem;
      border-radius: 50%;
      background-color: $color-primary;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      opacity: 0;
      transition: opacity .3s;
    }
  }


  //checked pseudo class s available on all type ="radio" button, 
  //1 tell us if the button is checked. can be checked by clicking on the label fue to linking "for" and "id" in html
  //2 access the parent of the radio button with the adjacent sibling selector "+" or sibling selector "~",
  //3 select the child of the label, the radio button, 
  //4 select the after element and change opacity to 1 in order to make it seem like we have a green radio button, the same thing will work for check boxes
  &__radio-input:checked ~ &__radio-label &__radio-button::after{
    opacity: 1;
  }
}
